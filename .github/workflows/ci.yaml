name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ '**' ]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (black/isort/flake8)
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.11", "3.12" ]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Set up Python $${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: pyproject.toml
      
      - name: Install dev dependencies
        run: |
          python -m pip install -U pip
          pip install -e .[dev]
        
      - name: Black (check)
        run: black --check .

      - name: isort (check)
        run: isort --check-only --diff .
      
      - name: flake8
        run: flake8
  
  typecheck:
    name: Type check (mypy)
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.11", "3.12" ]
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Set up Python $${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: pyproject.toml
      
      - name: Install project + dev dependencies
        run: |
          python -m pip install -U pip
          pip install -e .[dev]
      
      - name: Run mypy
        run: mypy --config-file=pyproject.toml
  
  unit-tests:
    name: Unit tests + coverage
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [ lint, typecheck ]
    strategy:
      matrix:
        python-version: [ "3.11", "3.12" ]
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Set up Python $${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      
      - name: Install project + dev dependencies
        run: |
          python -m pip install -U pip
          pip install -e .[dev]
      
      - name: Run tests with coverage
        run: |
          pytest -q --maxfail=1 --disable-warnings \
            -m "not integration and not e2e and not slow and not perf" \
            --cov=src --cov-report=term-missing --cov-report=xml:coverage.xml \
            --cov-fail-under=70
      
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-py${{ matrix.python-version }}
          path: coverage.xml
          if-no-files-found: warn
